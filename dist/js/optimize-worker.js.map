{"version":3,"sources":["../../src/js/optimize-worker.js"],"names":[],"mappings":"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","file":"optimize-worker.js","sourcesContent":["self.onmessage = function onmessage({data}) {\r\n    'use strict';\r\n    switch (data.cmd) {\r\n        case 'start': {\r\n            let {courses, maxHours} = data;\r\n            let res = optimize(courses, maxHours);\r\n            self.postMessage(res);\r\n            break;\r\n        }\r\n        default: {\r\n            break;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Optimize an array of courses to get the maximum amount of points in the allowed maxHours.\r\n * NOTE: At this point, Course-objects have been serialized so we need to access the private\r\n * _work and _points properties (methods cannot be serialized).\r\n *\r\n * @param courses\r\n * @param maxHours\r\n * @returns {{optimized: Array, totalPts: number, totalWork: number}}\r\n */\r\nfunction optimize(courses, maxHours) {\r\n    'use strict';\r\n\r\n    let totalPts = 0;\r\n    let totalWork = 0;\r\n    let optimized = []; // Final, optimized set of Courses\r\n\r\n    let numCourses = courses.length;\r\n\r\n    // Skip the algorithm completely if there aren't any courses or\r\n    // if we don't have any hours to fill up\r\n    if (maxHours > 0 && numCourses > 0) {\r\n\r\n        // No need for the algorithm\r\n        // if we only have one Course that fits.\r\n        // But bail out if there's only one Course and it doesn't fit.\r\n        if (numCourses === 1 && courses[0]._work <= maxHours) {\r\n            totalPts = courses[0]._points;\r\n            totalWork = courses[0]._work;\r\n            optimized.push(courses[0]);\r\n        } else if (numCourses > 1) {\r\n\r\n            /**\r\n             * The Knapsack algorithm\r\n             * Based on:\r\n             * https://www.youtube.com/watch?v=EH6h7WA7sDw &\r\n             * https://gist.github.com/danwoods/7496329\r\n             */\r\n\r\n            let courseInd;\r\n            let workInd;\r\n            let maxPrev;\r\n            let maxNew;\r\n\r\n            // Setup matrices (create (numCourses + 1) * (maxHours +1) sized empty Arrays)\r\n            let workMatrix = new Array(numCourses + 1);\r\n            let keepMatrix = new Array(numCourses + 1);\r\n            for (courseInd = 0; courseInd < numCourses + 1; courseInd++) {\r\n                workMatrix[courseInd] = new Array(maxHours + 1);\r\n                keepMatrix[courseInd] = new Array(maxHours + 1);\r\n            }\r\n\r\n            // Sort the courses by work.\r\n            // This makes the algorithm choose the course with the least amount of work,\r\n            // when for example: maxHours = 10, course1 = 5 points & 6h, course2 = 5p & 6h (i.e. both don't fit).\r\n            courses.sort((a, b) => a._work - b._work);\r\n\r\n            // Build the workMatrix\r\n            for (courseInd = 0; courseInd <= numCourses; courseInd++) {\r\n                for (workInd = 0; workInd <= maxHours; workInd++) {\r\n\r\n                    // Caching items (for huge values of maxHours or numCourses, i.e. huge arrays)\r\n                    let rW = workMatrix[courseInd];\r\n                    let rwPrev = workMatrix[courseInd - 1];\r\n                    let rK = keepMatrix[courseInd];\r\n                    let c = courses[courseInd - 1];\r\n\r\n                    // Fill top row and left column with zeros (representing a knapsack that\r\n                    // can fit 0 hours of work, and 0 courses selected).\r\n                    if (courseInd === 0 || workInd === 0) {\r\n                        rW[workInd] = 0;\r\n                    } else if (c._work <= workInd) { // The Course will fit\r\n\r\n                        // Compare the values of keeping it or leaving it\r\n                        maxNew = c._points + rwPrev[workInd - c._work];\r\n                        maxPrev = rwPrev[workInd];\r\n\r\n                        // Update the matrices\r\n                        if (maxNew > maxPrev) {\r\n                            rW[workInd] = maxNew;\r\n                            rK[workInd] = 1;\r\n                        } else { // Previous maximum was better\r\n                            // => keep the previous maximum\r\n                            rW[workInd] = maxPrev;\r\n                            rK[workInd] = 0;\r\n                        }\r\n                    } else { // The Course won't fit\r\n                        // => points and work are the same as the previous ones.\r\n                        rW[workInd] = rwPrev[workInd];\r\n                    }\r\n                }\r\n            }\r\n            // Traverse through keepMatrix ([numItems][capacity] -> [1][?])\r\n            // to create the optimized set of courses.\r\n            workInd = maxHours;\r\n            courseInd = numCourses;\r\n            for (courseInd; courseInd > 0; courseInd--) {\r\n                // In the keepMatrix, items marked as 1 are to be kept\r\n                if (keepMatrix[courseInd][workInd] === 1) {\r\n                    optimized.push(courses[courseInd - 1]);\r\n                    totalWork += courses[courseInd - 1]._work; // Count the total work amount\r\n                    workInd = workInd - courses[courseInd - 1]._work;\r\n                }\r\n            }\r\n\r\n            totalPts = workMatrix[numCourses][maxHours];\r\n        }\r\n    }\r\n\r\n    return {optimized, totalPts, totalWork};\r\n}\r\n"]}