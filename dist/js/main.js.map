{"version":3,"sources":["../../src/js/main.js"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["(function () {\r\n    'use strict';\r\n\r\n    /**\r\n     * Course model\r\n     *\r\n     * @class\r\n     */\r\n    class Course {\r\n\r\n        /**\r\n         * Course must have a name,\r\n         * amount of points awarded and work required (in hours).\r\n         *\r\n         * @constructor\r\n         * @param {String} name Course name\r\n         * @param {Number} points Points awarded on completion\r\n         * @param {Number} work Work required to complete, in hours\r\n         */\r\n        constructor(name, points, work) {\r\n            this.name = name;\r\n            this.points = points;\r\n            this.work = work;\r\n        }\r\n\r\n        get points() {\r\n            return this._points;\r\n        }\r\n\r\n        set points(p) {\r\n            this._points = p >= 0 ? p : 0;\r\n        }\r\n\r\n        get work() {\r\n            return this._work;\r\n        }\r\n\r\n        set work(p) {\r\n            this._work = p >= 0 ? p : 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Optimator model\r\n     * Can be used to optimize amount of points in a given set of hours.\r\n     *\r\n     * @class\r\n     */\r\n    class Optimator {\r\n\r\n        /**\r\n         * The Optimator takes an Array of Course-models and the maximum amount of hours available.\r\n         *\r\n         * @constructor\r\n         * @param {Course[]} [courses=[]] Courses to optimize\r\n         * @param {Number} [maxHours=0] Maximum amount of amount available\r\n         */\r\n        constructor(courses = [], maxHours = 0) {\r\n            this.courses = courses;\r\n            this.maxHours = maxHours;\r\n        }\r\n\r\n        get maxHours() {\r\n            return this._maxHours;\r\n        }\r\n\r\n        /**\r\n         * Setter for maxHours\r\n         *\r\n         * @throws Error if value is not a positive number\r\n         * @param hours\r\n         */\r\n        set maxHours(hours) {\r\n            if (!isNaN(hours) && hours >= 0) {\r\n                this._maxHours = hours;\r\n            } else {\r\n                throw new Error('maxHours must be a positive number!');\r\n            }\r\n        }\r\n\r\n        get courses() {\r\n            return this._courses;\r\n        }\r\n\r\n        /**\r\n         * Setter for courses\r\n         *\r\n         * @throws Error if value is not an Array of Courses\r\n         * @param courses\r\n         */\r\n        set courses(courses) {\r\n            if (Array.isArray(courses)) {\r\n                if (courses.length > 0 && !(courses[0] instanceof Course)) {\r\n                    throw new Error('courses must be an Array of Courses!');\r\n                } else {\r\n                    this._courses = courses;\r\n                }\r\n            } else {\r\n                throw new Error('courses must be an Array!');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Optimize course selections\r\n         * @returns {{optimized: Array, totalPts: number, totalWork: number}}\r\n         */\r\n        getOptimizedCourses() {\r\n            let totalPts = 0;\r\n            let totalWork = 0;\r\n            let optimized = []; // Final, optimized set of Courses\r\n\r\n            let numCourses = this.courses.length;\r\n\r\n\r\n            // Skip the algorithm completely if there aren't any courses or\r\n            // if we don't have any hours to fill up\r\n            if (this.maxHours > 0 && numCourses > 0) {\r\n\r\n                // No need for the algorithm\r\n                // if we only have one Course that fits.\r\n                // But bail out if there's only one Course and it doesn't fit.\r\n                if (numCourses === 1 && this.courses[0].work <= this.maxHours) {\r\n                    totalPts = this.courses[0].points;\r\n                    totalWork = this.courses[0].work;\r\n                    optimized.push(this.courses[0]);\r\n                } else if (numCourses > 1) {\r\n\r\n                    /**\r\n                     * The Knapsack algorithm\r\n                     * Based on:\r\n                     * https://www.youtube.com/watch?v=EH6h7WA7sDw &\r\n                     * https://gist.github.com/danwoods/7496329\r\n                     */\r\n\r\n                    let courseInd;\r\n                    let workInd;\r\n                    let maxPrev;\r\n                    let maxNew;\r\n\r\n                    // Setup matrices (create (numCourses + 1) * (maxHours +1) sized empty Arrays)\r\n                    let workMatrix = Array.apply(null, Array(numCourses + 1))\r\n                        .map(() => new Array(this.maxHours + 1));\r\n                    let keepMatrix = Array.apply(null, Array(numCourses + 1))\r\n                        .map(() => new Array(this.maxHours + 1));\r\n\r\n                    // Build the workMatrix\r\n                    for (courseInd = 0; courseInd <= numCourses; courseInd++) {\r\n                        for (workInd = 0; workInd <= this.maxHours; workInd++) {\r\n\r\n                            // Fill top row (representing a knapsack that can fit 0 hours of work)\r\n                            // and left column with zeros.\r\n                            if (courseInd === 0 || workInd === 0) {\r\n                                workMatrix[courseInd][workInd] = 0;\r\n                            } else if (this.courses[courseInd - 1].work <= workInd) {\r\n                                // If the Course will fit, compare the values of keeping it or leaving it\r\n                                maxNew = this.courses[courseInd - 1].points +\r\n                                    workMatrix[courseInd - 1][workInd - this.courses[courseInd - 1].work];\r\n                                maxPrev = workMatrix[courseInd - 1][workInd];\r\n\r\n                                // Update the matrices\r\n                                if (maxNew > maxPrev) {\r\n                                    workMatrix[courseInd][workInd] = maxNew;\r\n                                    keepMatrix[courseInd][workInd] = 1;\r\n                                } else {\r\n                                    workMatrix[courseInd][workInd] = maxPrev;\r\n                                    keepMatrix[courseInd][workInd] = 0;\r\n                                }\r\n                            } else {\r\n                                // Else, the course can't fit\r\n                                // => points and work are the same as before.\r\n                                workMatrix[courseInd][workInd] = workMatrix[courseInd - 1][workInd];\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // Traverse through keepMatrix ([numItems][capacity] -> [1][?])\r\n                    // to create the optimized set of courses.\r\n                    workInd = this.maxHours;\r\n                    courseInd = numCourses;\r\n                    for (courseInd; courseInd > 0; courseInd--) {\r\n                        if (keepMatrix[courseInd][workInd] === 1) {\r\n                            optimized.push(this.courses[courseInd - 1]);\r\n                            totalWork += this.courses[courseInd - 1].work;\r\n                            workInd = workInd - this.courses[courseInd - 1].work;\r\n                        }\r\n                    }\r\n\r\n                    totalPts = workMatrix[numCourses][this.maxHours];\r\n                }\r\n            }\r\n\r\n            return {optimized, totalPts, totalWork};\r\n        }\r\n\r\n        /**\r\n         * Get a Course by its row index\r\n         * @param {Number} ind\r\n         * @returns {Course}\r\n         */\r\n        getCourseByInd(ind) {\r\n            return this.courses[ind];\r\n        }\r\n\r\n        /**\r\n         * Add a Course to the Optimator.\r\n         *\r\n         * @method\r\n         * @param {Course} course\r\n         */\r\n        addCourse(course = null) {\r\n            if (course !== null && course instanceof Course) {\r\n                this.courses.push(course);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Remove a Course from the Optimator using its index\r\n         *\r\n         * @method\r\n         * @param {Number} ind\r\n         */\r\n        removeCourseByInd(ind = -1) {\r\n            if (ind >= 0) {\r\n                if (this.courses.length > ind) {\r\n                    this.courses.splice(ind, 1);\r\n                } else {\r\n                    throw new Error('Index out of bounds!');\r\n                }\r\n            } else {\r\n                throw new Error('Index must be a positive integer!');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Remove a Course by reference.\r\n         *\r\n         * @method\r\n         * @param {Course} course\r\n         */\r\n        removeCourse(course = null) {\r\n            if (course !== null) {\r\n                let ind = this.courses.indexOf(course);\r\n                if (ind >= 0) {\r\n                    this.courses.splice(ind, 1);\r\n                } else {\r\n                    throw new Error('Course not in Optimator\\'s courses lists!');\r\n                }\r\n            } else {\r\n                throw new Error('Give a course to remove!');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Clear all Courses\r\n         */\r\n        clearCourses() {\r\n            this.courses = [];\r\n        }\r\n    }\r\n\r\n    class OptimatorForm {\r\n        constructor({courses = [], maxHours = 0} = {}) {\r\n            this.optimator = new Optimator(courses, maxHours);\r\n            this._onSubmit = this._onSubmit.bind(this);\r\n            this._onAddRow = this._onAddRow.bind(this);\r\n            this._onRemoveRow = this._onRemoveRow.bind(this);\r\n        }\r\n\r\n        /**\r\n         * Init the form.\r\n         * Sets event listeners.\r\n         */\r\n        init() {\r\n            let addBtn = document.getElementById('add-btn');\r\n            this._totalHoursInputEl = document.getElementById('total-hours-input');\r\n            this._formEl = document.getElementById('courses-form');\r\n            this._coursesEl = document.getElementById('courses-table-body');\r\n            this._resultsBodyEl = document.getElementById('results-table-body');\r\n            this._totalPointsEl = document.getElementById('total-points');\r\n            this._totalWorkEl = document.getElementById('total-work');\r\n\r\n            let initialRowDeleteBtn = this.coursesEl.querySelector('.remove-btn');\r\n\r\n            // Clear out any previous listeners\r\n            this._formEl.removeEventListener('submit', this._onSubmit);\r\n            this._formEl.addEventListener('submit', this._onSubmit);\r\n            addBtn.removeEventListener('click', this._onAddRow);\r\n            addBtn.addEventListener('click', this._onAddRow);\r\n            initialRowDeleteBtn.removeEventListener('click', this._onRemoveRow);\r\n            initialRowDeleteBtn.addEventListener('click', this._onRemoveRow);\r\n        }\r\n\r\n        get totalHoursInputEl() {\r\n            return this._totalHoursInputEl;\r\n        }\r\n\r\n        /**\r\n         * @returns {Element|*}\r\n         */\r\n        get formEl() {\r\n            return this._formEl;\r\n        }\r\n\r\n        /**\r\n         * @returns {Element|*}\r\n         */\r\n        get coursesEl() {\r\n            return this._coursesEl;\r\n        }\r\n\r\n        /**\r\n         * @returns {Element|*}\r\n         */\r\n        get resultsBodyEl() {\r\n            return this._resultsBodyEl;\r\n        }\r\n\r\n        get totalPointsEl() {\r\n            return this._totalPointsEl;\r\n        }\r\n\r\n        get totalWorkEl() {\r\n            return this._totalWorkEl;\r\n        }\r\n\r\n        /**\r\n         * Add a row to the courses table\r\n         */\r\n        addRow() {\r\n            let rowEl = document.createElement('tr');\r\n            rowEl.classList.add('input-row');\r\n            rowEl.innerHTML = `<td>\r\n                <input class=\"input-name\" type=\"text\" placeholder=\"Course name\" required>\r\n            </td>\r\n            <td>\r\n                <input class=\"input-points\" type=\"number\" min=\"0\" placeholder=\"Course points\" required>\r\n            </td>\r\n            <td>\r\n                <input class=\"input-work\" type=\"number\" min=\"0\" placeholder=\"Work required in hours\" required>\r\n            </td>\r\n            <td>\r\n                <button class=\"remove-btn\" type=\"button\">Remove</button>\r\n            </td>`;\r\n\r\n            rowEl.querySelector('.remove-btn').addEventListener('click', this._onRemoveRow);\r\n\r\n            this.coursesEl.appendChild(rowEl);\r\n        }\r\n\r\n        /**\r\n         * Remove a row from the courses table\r\n         * @param {Number} ind Row index to remove\r\n         */\r\n        removeRow(ind) {\r\n            let targetRow = this.coursesEl.querySelectorAll('tr')[ind];\r\n            this.coursesEl.removeChild(targetRow);\r\n        }\r\n\r\n        /**\r\n         * Add row -button handler\r\n         * @param {MouseEvent} evt\r\n         * @private\r\n         */\r\n        _onAddRow(evt) {\r\n            evt.preventDefault();\r\n            this.addRow();\r\n        }\r\n\r\n        /**\r\n         * Remove-button handler\r\n         * @param {MouseEvent} evt\r\n         * @private\r\n         */\r\n        _onRemoveRow(evt) {\r\n            evt.preventDefault();\r\n            // rowIndex is 1-based\r\n            this.removeRow(evt.target.parentElement.parentElement.rowIndex - 1);\r\n        }\r\n\r\n        /**\r\n         * Optimize inputted courses on form submit,\r\n         * and print the results.\r\n         *\r\n         * @param evt\r\n         * @private\r\n         */\r\n        _onSubmit(evt) {\r\n            evt.preventDefault();\r\n\r\n            this.optimator.maxHours = OptimatorForm._parseToPositiveFloat(this.totalHoursInputEl.value);\r\n            let rows = this.coursesEl.querySelectorAll('.input-row');\r\n\r\n            this.optimator.clearCourses();\r\n\r\n            for (let i = 0; i < rows.length; i++) {\r\n                this.optimator.addCourse(new Course(\r\n                    rows[i].querySelector('.input-name').value,\r\n                    OptimatorForm._parseToPositiveFloat(rows[i].querySelector('.input-points').value),\r\n                    OptimatorForm._parseToPositiveFloat(rows[i].querySelector('.input-work').value)\r\n                ));\r\n            }\r\n\r\n            let {optimized, totalPts, totalWork} = this.optimator.getOptimizedCourses();\r\n            this._printResults(optimized, totalPts, totalWork);\r\n        }\r\n\r\n        /**\r\n         * Parse a String (work hours / points) to a positive float.\r\n         *\r\n         * @param {String} str Work hours or points\r\n         * @returns {number} Parsed float\r\n         * @static\r\n         * @private\r\n         */\r\n        static _parseToPositiveFloat(str) {\r\n            let num = 0;\r\n\r\n            if (str !== '') {\r\n                let parsed = parseFloat(str.replace(',', '.'));\r\n                num = parsed >= 0 ? parsed : 0;\r\n            }\r\n\r\n            return num;\r\n        }\r\n\r\n        /**\r\n         * Print optimized results to the results table\r\n         *\r\n         * @param {Course[]} data\r\n         * @param {Number} totalPoints\r\n         * @param {Number} totalWork\r\n         * @private\r\n         */\r\n        _printResults(data, totalPoints, totalWork) {\r\n            let output = '';\r\n\r\n            if (data.length > 0) {\r\n                data.forEach(d => {\r\n                    output += `<tr class=\"new-item\">\r\n                    <td>${d.name}</td>\r\n                    <td>${d.points}</td>\r\n                    <td>${d.work}</td>\r\n                </tr>`;\r\n                });\r\n            } else {\r\n                output = `<tr class=\"new-item\">\r\n                    <td colspan=\"3\" class=\"empty-row\">No courses selected</td>\r\n                </tr>`;\r\n            }\r\n\r\n            this.resultsBodyEl.innerHTML = output;\r\n            this.totalPointsEl.innerHTML = totalPoints;\r\n            this.totalWorkEl.innerHTML = totalWork;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * MAIN ENTRY POINT\r\n     */\r\n    function main() {\r\n        const FORM = new OptimatorForm();\r\n        FORM.init();\r\n    }\r\n\r\n    main();\r\n})();\r\n"]}